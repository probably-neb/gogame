package main

import (
    "os"
    "fmt"
)

var isProd = os.Getenv("ENV") == "PRODUCTION"

templ Layout(title string) {
    <!doctype html>
    <html lang="en" class="dark" style="color-scheme: dark">
        <head>
            <meta charset="UTF-8" />
            <title>{title}</title>
            <link rel="icon" type="image/svg+xml" href="/dist/favicon.svg" />
            <meta name="viewport" content="width=device-width, initial-scale=1" />
            <meta name="robots" content="index, follow" />
            <meta name="revisit-after" content="7 days" />
            <meta name="language" content="English" />
            <script
                if isProd {
                    src="https://unpkg.com/htmx.org@1.9.5/dist/htmx.min.js"
                } else {
                    src="https://unpkg.com/htmx.org@1.9.5/dist/htmx.js"
                }
            ></script>
            <script src="https://unpkg.com/htmx.org@1.9.5/dist/ext/ws.js"></script>
            <link rel="stylesheet" href="/assets/tailwind.css"></link>
            <script>
                htmx.on("htmx:wsConfigSend", function(e) {
                    console.dir(e, {depth: null})
                    let ty = e.detail.elt.dataset.type
                    let grp = e.detail.elt.dataset.group
                    e.detail.parameters = {type: ty, group: grp, data: e.detail.parameters}
                })
                htmx.on("htmx:configRequest", function(e) {
                    let sessionInput = htmx.find('#session-id')
                    if (!sessionInput) {
                        return
                    }
                    let sessionId = sessionInput.value
                    e.detail.headers["Session-Id"] = sessionId
                })
            </script>
        </head>
        <body id="body" class="bg-background">
            { children... }
        </body>
    </html>
}

func RoomURL(id string, rest string) string {
    if len(rest) > 0 && rest[0] != '/' {
        rest = "/" + rest
    }
    return "/rooms/" + id + rest
}

templ Session(sessionId string) {
    <input type="hidden" name="session-id" id="session-id" value={sessionId}></input>
}

// CREDIT: shadcn-ui
templ Button() {
    <div class="inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 border-ring border-4 bg-primary-foreground text-foreground hover:bg-ring h-10 px-4 py-2">
        { children... }
    </div>
}

var colors = []string {
    "bg-foreground",
    "bg-border",
    "bg-input",
    "bg-ring",
    "bg-background",
    "bg-primary",
    "bg-primary-foreground",
    "bg-secondary",
    "bg-secondary-foreground",
    "bg-destructive",
    "bg-muted",
    "bg-muted-foreground",
    "bg-accent",
    "bg-accent-foreground",
    "bg-popover",
    "bg-popover-foreground",
    "bg-card",
    "bg-card-foreground",
};

templ SessionInput(displayName string) {
    <form id="session-form" class="text-small text-gray-800" hx-post="/sessions" hx-sync="this:abort">
        <div class="grid gap-y-1.5 gap-x-1.5 grid-cols-3 grid-rows-1 items-center text-foreground">
        <label for="display-name" class="text-right">Display Name:</label>
        <input
            type="text"
            name="display-name"
            id="display-name"
            if displayName != "" {
                value={displayName}
            }
            hx-post="/sessions"
            required="true"
            class="rounded-sm p-2 col-span-2"
            placeholder="Display Name"
            ></input>
        </div>
    </form>
}

templ LandingPage(sessionId string, displayName string) {
    @Layout("GOGAME!") {
        <div class="w-screen h-screen flex flex-col items-center justify-around">
        @Session(sessionId)
        @SessionInput(displayName)
        <div hx-boost="true" class="flex flex-row items-center justfiy-around">
            @Button() { <button id="create-room"><a href="/rooms/create">Create Room</a></button> }
            @Button() { <button id="join-room"><a href="/rooms" hx-push-url="true">Join Room</a></button> }
        </div>
            if !isProd {
                <table>
                <tbody>
                for _, color := range colors {
                    <tr>
                    <td>{color}</td>
                    <td>
                        <div class={"w-8 h-5 " + color}></div>
                    </td>
                    </tr>
                }
                </tbody>
                </table>
            }
        </div>
    }
}

// CREDIT: shadcn-ui dialog
templ Modal(id string) {
    <div id={id}>
        <div data-state="open" class="fixed inset-0 z-50 bg-background/80 backdrop-blur-sm data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0" style="pointer-events: auto;" data-aria-hidden="true" aria-hidden="true"></div>
        <div role="dialog" data-state="open" class="fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg md:w-full sm:max-w-[425px]" tabindex="-1" style="pointer-events: auto;">
            { children... }
        </div>
    </div>
}

templ CreateRoomModal(sessionId string) {
    @Modal("create-room-modal") {
        <form class="text-small text-gray-800" hx-post="/rooms/create" hx-boost="true" hx-target="body">
            <div class="grid gap-y-1.5 gap-x-1.5 grid-cols-3 grid-rows-1 items-center text-foreground">
            <label for="room-name" class="text-right">Room Name</label>
            <input type="text" name="room-name" id="room-name" placeholder="Room Name" class="rounded-sm p-2 col-span-2"></input>
            @Session(sessionId)
            </div>
            <div class="h-4"></div>
            <div class="flex justify-around">
            @Button() { <button type="button"><a href="/" hx-boost="true">Cancel</a></button> }
            @Button() { <button id="create" type="submit">Create</button> }
            </div>
        </form>
}
}

// TODO: further divide up session input and have join button here
templ JoinRoomModal() {
    @Modal("join-room-modal") {
        @SessionInput("")
    }
}

// TODO: remove redeclaration of Room, make Room have public fields instead
type HRoom struct {
    Name string
    Host string
    Guests []string
}

templ LobbyGuest(name string) {
    <li id={name}>{name}</li>
}

// TODO: add kind var for kick functionality
templ GuestList(guests []string, append bool) {
        <ul id="players" if append {
            hx-swap-oob="beforeend"
        }>
            for _, guest := range guests {
                @LobbyGuest(guest)
            }
        </ul>
}

templ GamesList(kind string) {
    <div>
        <h3>Games</h3>
        <ul>
            <li>Tic-Tac-Toe
                if kind == "host" {
                    @Button() { <button id="start-tic-tac-toe" name="play" value="tictactoe" ws-send data-group="room" data-type="play">Play!</button> }
                }
            </li>
        </ul>
    </div>
}

templ RoomWS(roomid string, sessionId string) {
    <div id="ws-connection" hx-preserve="true" hx-ext="ws" ws-connect={RoomURL(roomid, sessionId + "/ws")} >
        { children...}
    </div>
}

templ RoomPageBody(room HRoom, kind string) {
    <div id="room-page-body">
        <h3>{room.Name}</h3>
        <h2>Host:</h2>
        <p id="host">{room.Host}</p>
        <h2>Guests:</h2>
        @GuestList(room.Guests, false)
        @GamesList(kind)
    </div>
}

templ CreateRoomPage(sessionId string) {
    @Layout("Create Room") {
        @CreateRoomModal(sessionId)
        @RoomPageBody(HRoom{}, "host")
    }
}


templ GuestRoomPage(room HRoom, sessionId string) {
    @Layout(room.Name) {
        @Session(sessionId)
        @RoomWS(room.Name, sessionId) {
            @RoomPageBody(room, "guest")
        }
    }
}

templ JoinRoomPage(room HRoom, sessionId string) {
    @Layout(room.Name) {
        @Session(sessionId)
        @JoinRoomModal()
        @RoomPageBody(room, "guest")
    }
}



templ HostRoomPage(room HRoom, sessionId string) {
    @Layout(room.Name) {
        @Session(sessionId)
        @RoomWS(room.Name, sessionId) {
            @RoomPageBody(room, "host")
        }
    }
}

templ CloseJoinModal() {
    <div id="join-room-modal"></div>
}

templ JoinRoomEntry(room HRoom) {
    <h3>{room.Name}</h3>
    <h2>Host:</h2>
    <p>{room.Host}</p>
    <h2>Guests: {fmt.Sprint(len(room.Guests))}</h2>
    <button id="join-room" class="rounded-md border-2 border-black"><a href={templ.SafeURL("/rooms/" + room.Name)} hx-boost="true">Join Room</a></button>
}

templ RoomList(rooms []HRoom, sessionId string) {
    @Session(sessionId)
    <ul>
        for _, room := range rooms {
            <li id={room.Name}>
                @JoinRoomEntry(room)
            </li>
        }
    </ul>
}

// TODO: use HX headers to differentiate between hx request vs normal fetch
// to decide whether or not to render entire page or just roomslist
templ RoomListPage(rooms []HRoom, sessionId string) {
    @Layout("Join Room") {
        @RoomList(rooms, sessionId)
    }
}
